openapi: 3.0.1
info:
  title: Booking Service API
  description: Booking from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /book:
    post:
      tags:
        - Book
      summary: Book a table in a restaurant
      operationId: app.create_booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBooking'
      responses:
        200:
          description: "The operation completed successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /book/{reservation_id}:
    get:
      tags:
        - Book
      summary: Get a single reservation
      operationId: app.get_booking
      parameters:
        - name: reservation_id
          in: path
          description: Reservation's Unique identifier
          required: true
          example: 54
          schema:
            type: integer
      responses:
        200:
          description: Return Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleBook'
        404:
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    delete:
      tags:
        - Book
      summary: Delete a reservation
      operationId: app.delete_booking
      parameters:
        - name: reservation_id
          in: path
          description: Reservation's Unique identifier
          required: true
          example: 54
          schema:
            type: integer
        - name: user_id
          in: query
          description: Reservation's Unique identifier
          required: true
          example: 12
          schema:
            type: integer
      responses:
        200:
          description: "The operation is successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          description: "The code returned if there is some error on server, e.g: param not specified"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
components:
  schemas:
    RequestBooking:
      required:
      - restaurant_id
      - user_id
      - datetime
      - people_number
      - raw_friends
      type: object
      properties:
        restaurant_id:
          type: integer
          description: ID of restaurant to book
          example: 12
        user_id:
          type: integer
          description: ID of user that want to book
          example: 125
        datetime:
          type: string
          format: date-time
          description: When you want to book
          example: "2021-07-21T20:30:00Z"
        people_number:
          type: integer
          description: Number of people to book for
          example: 3
        raw_friends:
          type: string
          description: list of friends' email separated by semicolumn
          example: "john.doe@mail.com;james@mail.com"
    Booking:
      required:
      - id
      - restaurant_name
      - table_name
      type: object
      properties:
        id:
          type: integer
          description: The ID of the new booking
          example: 564
        restaurant_name:
          type: string
          description: The restaurant name
          example: "Gino's Pizzeria"
        table_name:
          type: string
          description: The booked Table name
          example: "Table 23A"
    SimpleBook:
      required:
        - id
        - reservation_date
        - reservation_end
        - customer_id
        - table_id
        - people_number
        - checkin
      type: object
      properties:
        id:
          type: integer
          description: The ID of the new booking
          example: 564
        reservation_date:
          type: string
          format: date-time
          description: Reservation datetime
          example: "2021-07-21T20:30:00Z"
        reservation_end:
          type: string
          format: date-time
          description: Reservation end datetime
          example: "2021-07-21T20:50:00Z"
        customer_id:
          type: integer
          description: Customer of the Reservation
          example: 12
        table_id:
          type: integer
          description: Table of Reservation
          example: 142
        people_number:
          type: integer
          description: Number of the people in the booking
          example: 3
        checkin:
          type: boolean
          description: If customer entered the restaurant
          example: True
    Result:
      required:
        - code
      type: object
      properties:
        code:
          type: integer
          description: HTTP Status Code
        message:
          type: string
          default: Type of result
          example: "Message to describe what happen on server"